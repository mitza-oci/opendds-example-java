---
name: Build
on:
  pull_request:
  push:
  schedule:
    - cron: '0 7 * * SUN'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        opendds_branch:
          - master
          - latest-release
        runner:
          - windows-2022
          - ubuntu-22.04
          - macos-12
        configuration:
          - Debug
        include:
          - runner: macos-12
            java_option: =$JAVA_HOME_17_X64
            java_home: $JAVA_HOME_17_X64
            config_options: |
              --xerces3=$(brew --prefix xerces-c) --openssl=/usr/local/opt/openssl@1.1
          - runner: windows-2022
            opendds_branch: master
            configuration: Release
          - runner: windows-2022
            opendds_branch: latest-release
            configuration: Release

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3
      - name: Get dependencies from apt
        if: runner.os == 'Linux'
        run: |
         sudo apt-get -y install libxerces-c-dev
      - name: Get dependencies from homebrew
        if: runner.os == 'macOS'
        run: |
         brew install xerces-c
      - name: Prepare to use vcpkg
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo { "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] } > vcpkg.json
          echo VCPKG_DEFAULT_TRIPLET=x64-windows>> %GITHUB_ENV%
          echo VCPKG_INSTALLED_DIR=${{ github.workspace }}\vcpkg\installed>> %GITHUB_ENV%
      - name: Get dependencies from vcpkg
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 688ece714204fb5e9ad790ad9ad6d9f571d2b032
          runVcpkgInstall: true
      - name: Checkout OpenDDS
        uses: actions/checkout@v3
        with:
          repository: OpenDDS/OpenDDS
          path: OpenDDS
          ref: ${{ matrix.opendds_branch }}
          fetch-depth: 1
      - name: Get OpenDDS commit
        shell: bash
        run: |
          echo OPENDDS_COMMIT=$(cd OpenDDS; git rev-parse HEAD) >> $GITHUB_ENV
      - name: Cache OpenDDS
        id: cache-artifact
        uses: actions/cache@v3
        with:
          path: OpenDDS
          key: c02_${{ matrix.runner }}_OpenDDS_${{ env.OPENDDS_COMMIT }}${{ matrix.configuration }}
      - name: Configure OpenDDS
        if: steps.cache-artifact.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: |
          cd OpenDDS
          ./configure -v --java${{ matrix.java_option }} --mpcopts="-workers 4" --security ${{ matrix.config_options }}
          tools/scripts/show_build_config.pl
      - name: Set up msvc env
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure OpenDDS
        if: steps.cache-artifact.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: cmd
        run: |
          cd OpenDDS
          call configure -v --java${{ matrix.java_option }} --mpcopts="-workers 4" --xerces3=${{ env.VCPKG_INSTALLED_DIR }}\x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}\x64-windows
          tools\scripts\show_build_config.pl
          echo set CONFIGURATION=${{ matrix.configuration }}>> setenv.cmd
      - name: Compile OpenDDS
        if: steps.cache-artifact.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: |
          make -C OpenDDS -sj6
      - name: Compile OpenDDS
        if: steps.cache-artifact.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: cmd
        run: |
          cd OpenDDS
          call setenv
          msbuild -p:Configuration=%CONFIGURATION%,Platform=x64 -m DDS_TAOv2.sln
      - name: Compile Project IDL
        if: runner.os != 'Windows'
        run: |
          . OpenDDS/setenv.sh
          cd idl
          ./build-libs.sh
      - name: Compile Project IDL
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call OpenDDS/setenv
          cd idl
          call build-libs
      - name: Compile Publisher and Subscriber
        if: runner.os != 'Windows'
        run: |
          . OpenDDS/setenv.sh
          cd pub
          ../build-app.sh
          cd ../sub
          ../build-app.sh
      - name: Compile Publisher and Subscriber
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call OpenDDS/setenv
          cd pub
          call ../build-app
          cd ../sub
          call ../build-app
      - name: Run Example
        if: runner.os != 'Windows'
        run: |
          export JAVA_HOME=${{ matrix.java_home }}
          (cd sub; ./run.sh) &
          (cd pub; ./run.sh Hello)
      - name: Run Example
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd sub & start /b cmd /s /c run & cd ..
          waitfor /t 5 pause 2>NUL
          cd pub & call run Hello & cd ..
          waitfor /t 60 pause 2>NUL
          exit 0
